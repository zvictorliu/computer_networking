<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第六章 应用层 on Computer Networking</title>
    <link>https://zvictorliu.github.io/computer_networking/application_layer/</link>
    <description>Recent content in 第六章 应用层 on Computer Networking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://zvictorliu.github.io/computer_networking/application_layer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络应用模型</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B/</guid>
      <description>网络应用模型#啥意思？说不清楚，自行体会
客户-服务器模型#这是我们熟悉的结构，许多应用都基于这个模型
P2P模型#没有中心服务器，或者说每个主机同时是客户机和服务器，直接相互通信(任意一对叫Peer)
比如Bittorrent、电驴这些就是基于P2P的，下载速度快
图最直观：</description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/dns/</guid>
      <description>域名系统#Domain Name System, DNS 是一种命名系统，和IP地址对应
层次域名空间：域名的语法规则
域名服务器记域名的解析
域名命名规则#从左到右是顶级域名
顶级域名TLD主要有三类：
国家地区：.cn, .uk, .hk 等等 通用顶级域名：.com 公司，.org 非盈利组织，.gov政府 等等 基础结构域名：只有一个arpa，用于反向域名解析，不知道具体是啥 每个域由不同组织管理
域名服务器#服务器进行域名解析，一个服务器的管辖范围称之为区
这个在《网络是怎样连接的》深有体会
根域名服务器知道所有顶级域名服务器IP地址，本地域名服务器无法解析就会首先区根域名服务器上找，但它其实只是中介，并不负责解析
本机向本地域名服务器要
权限域名服务器：主机都在这里登记
域名解析过程#本机构造一个DNS请求报文发给本地域名服务器
主机以递归方式向本地服务器查询
本地服务器以迭代方式向根服务器查询（给出答案或者找答案的地方）
每个DNS服务器上有高速缓存，方便快速查找
额，本机到本地域名服务器这个递归了个寂寞</description>
    </item>
    
    <item>
      <title>文件传输协议</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/ftp/</guid>
      <description>文件传输协议#客户向服务器建立两个并行的TCP连接：
控制连接：21号端口 数据连接：20号端口 服务器持续监听21号端口，等等客户连接，会话期间一直打开
服务器上主进程负责接收请求，子进程负责处理单个请求
控制进程接到请求后创建数据传送进程和数据连接
两种数据传输模式：
主动模式：PORT 客户端和服务器连接后，客户端自己开发一个端口，将端口号和PORT命令发送给服务器，服务器于是将20号端口和这个端口建立数据连接 被动模式：PASV 服务器收到PASV命令后，随机开放一个端口并告知客户端，客户端与之建立数据连接 FTP修改服务器上文件：
先读回来，修改后再传上去 网络文件系统：
能够远程操控，只复制一个小片段回来修改然后安装上去 </description>
    </item>
    
    <item>
      <title>电子邮件</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</guid>
      <description>电子邮件#异步通信方式算是一种思维革新吧
把东西放到信箱里，不需要同时在场
邮件系统结构#用户代理UA：用户和电子邮件系统的接口，一般就是电子邮件客户端
邮件服务器：它们之间发送和接收邮件
协议：用户代理和邮件服务器之间的协议
邮件格式和MIME#邮件的格式是 首部+主体
首部包括：
From: 源（UA帮填） To: 目标 Subject: 可选，用户填写主题 多用途网际邮件扩充MIME: 在SMTP基础上定义非ASCII码的编码规则，所以不只发英文文本还可以发附件
STMP和POP3#STMP#连接建立：发送服务器扫描缓冲区，发现有邮件就去和接收服务器建立连接，并发送HELO命令测试
邮件传送：
先MAIL FROM: &amp;lt;xxx&amp;gt;命令，看是否有OK返回，检查是否准备好接收 发送 RCPT TO: &amp;lt;xxx&amp;gt;命令，看是否有OK返回，检查地址是否正确 发送DATA命令，理论返回354 start mail input; end with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt; CR（Carriage Return）表示回车，CR（Carriage Return）表示回车，但这个跟操作系统有关，Windows下一行是CR+LF，而Linux只有LF，所以我们git有时候会有这个东西的替换 然后发送具体内容，回复OK 发出QUIT，回复xxx POP3和IMAP#下载并保留，下载并删除
IMAP则功能更多
基于万维网的，用户和服务器之间用HTTP</description>
    </item>
    
    <item>
      <title>WWW万维网</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/%E4%B8%87%E7%BB%B4%E7%BD%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/%E4%B8%87%E7%BB%B4%E7%BD%91/</guid>
      <description>万维网#一切事物使用统一资源定位符URL标识，通过超文本传输协议HTTP传送，而超文本标记语言HTML对文档结构的标记，使得能够在本地显示
浏览器，就是万维网在主机上的客户程序，而存万维网文档的主机成为万维网服务器
HTTP#浏览器向万维网服务器请求万维网文档以及传送给浏览器的协议
这点就是《网络是怎样连接的》讲的内容
HTTP是无连接的，不需要先建立连接
HTTP是无状态的，并不记忆客户是否访问过，但如果想记忆需要用到Cookie，服务器给用户分配一个识别码，以后用户访问的报文是带着识别码的，从而在服务器的数据库找到活动记录</description>
    </item>
    
  </channel>
</rss>
