<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>序 on Computer Networking</title>
    <link>https://zvictorliu.github.io/computer_networking/</link>
    <description>Recent content in 序 on Computer Networking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://zvictorliu.github.io/computer_networking/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.1 计网概述</title>
      <link>https://zvictorliu.github.io/computer_networking/introduction/%E8%AE%A1%E7%BD%91%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/introduction/%E8%AE%A1%E7%BD%91%E6%A6%82%E8%BF%B0/</guid>
      <description>概述#网络体系结构概念#计网的体系结构是一个分层模型，在功能上的模型，就是体系结构Architecture概念
每一层有自己的数据传输单位，各有自己的名称：比特、帧、分组、报文段
分数据部分SDU和控制信息PCI，共同组成协议数据单元PDU（报文）
网络协议：数据交换的规则，由语法、语义和同步组成；
语法：指定数据传输的格式 语义：要完成的功能 同步：事件执行的顺序 接口：相邻两层交换信息的连接点
服务：下层为上层提供的功能调用
ISO/OSI#ISO指的是国际标准化组织，他们提出的一种网络体系结构模型：开放式互连参考模型 (Open System Interconnection Reference Model, OSI)
共有7层，自底向上是
物理层：机械电子层面的原始比特流传输 数据链路层：将原始比特流变为逻辑传输线路 网络层：控制子网运行 传输层：两个进程通信？ 会话层：管理通信会话 表示层：数据处理，格式转换、编码解码等等 应用层： TCP/IP#另一种网络体系结构
网络接口层 网际层 传输层 应用层 而IP指的是网际层定义的标准分组格式和协议，IPv4, IPv6指的是版本
两种结构综合起来分为五层：
物理层 数据链路层 网络层 传输层 应用层 这个书就是在细讲这五层
这些层真的没有那么具体那么层次分明，所以对他们的作用不必太关注，只需要看具体的协议即可，这个有机联系确实没那么强</description>
    </item>
    
    <item>
      <title>2.1 通信基础知识</title>
      <link>https://zvictorliu.github.io/computer_networking/physical_layer/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/physical_layer/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</guid>
      <description>通信基础#首先需要了解一些基本概念，然后是著名的奈奎斯特定理和香农定理
进一步讲编码、交换等计数
一个典型的通信系统模型：
1 基本概念#1.1 术语#数据和信号：数据是信息实体，信号是物理存在形式
码元：一个固定时长的信号波形表示一位数字（\(k\)进制），不是一个比特
信道：一条线路的逻辑部分
速率：
波特率：
带宽：
1.2 传输方式#串行和并行传输，这个不必多说
同步传输：先告诉对方我要发多少
异步传输：起始位和终止位
1.3 交互模式#单工：一个方向 半双工：双向，但某一时刻是单向 全双工：可以同时 注意，一个方向就需要一条信道
2 定理#2.1 奈奎斯特#2.2 香农#3 编码与调制#转为数字信号叫编码，转为模拟信号叫调制
3.1 数字型数据 to 数字信号#能够区分开0和1，具体用什么样的数字信号有很多种
3.2 数字型数据 to 模拟信号#发送端调制，接收端解调，将01藏在正弦波当中：
3.3 模拟型数据 to 数字信号#PCM：采样、量化、编码
3.4 模拟型数据 to 模拟信号#大概也是调制解调吧</description>
    </item>
    
    <item>
      <title>3.1 功能</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%8A%9F%E8%83%BD/</guid>
      <description>数据链路层的功能#为网络层提供服务 对链路进行管理，建立、维护、释放等等 帧处理 流量控制 差错控制，使发送方确认接收方是否正确收到 服务网络层#面向连接和无连接的区别
链路管理#面向连接
帧#帧定界
帧同步
透明传输
流量控制#限制发送速率不超过接收速率
不只数据链路层才有
差错控制#位错：循环冗余校验CRC来发现，然后进行自动重传请求ARQ来重新传
帧错：定时器和编号机制</description>
    </item>
    
    <item>
      <title>UDP协议</title>
      <link>https://zvictorliu.github.io/computer_networking/transportation_layer/udp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/transportation_layer/udp/</guid>
      <description>UDP协议#适合一次性传输较少数据，虽然通信不可靠但是应用层还是有可靠性机制的
面向报文？？？
报文格式#首部+数据：
其中校验和可选，不用时全为0，用来检查是否出错
根据目的端口号找应用进程，找不到就丢弃，有ICMP发送不可达报文给发送端
校验#增加一个12B的伪首部到首部前，然后进行计算：
这个计算过程有点不太好说清楚
发送端：
计算要填入校验和的内容：全设置为0，然后把每16位取反码求和&amp;hellip; 发送（不包括伪首部和补零） 接收段：
加上伪首部，同样计算求和，正常的话应该全为1 </description>
    </item>
    
    <item>
      <title>网络应用模型</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B/</guid>
      <description>网络应用模型#啥意思？说不清楚，自行体会
客户-服务器模型#这是我们熟悉的结构，许多应用都基于这个模型
P2P模型#没有中心服务器，或者说每个主机同时是客户机和服务器，直接相互通信(任意一对叫Peer)
比如Bittorrent、电驴这些就是基于P2P的，下载速度快
图最直观：</description>
    </item>
    
    <item>
      <title>路由算法</title>
      <link>https://zvictorliu.github.io/computer_networking/network_layer/%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/network_layer/%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95/</guid>
      <description>路由算法#根据路由表的维护：
静态路由 手工配置 动态路由 相互连接的路由器彼此交换信息，按照一定算法优化出来 距离-向量算法#链路状态算法#层次路由概念#</description>
    </item>
    
    <item>
      <title>2.2 交换方式</title>
      <link>https://zvictorliu.github.io/computer_networking/physical_layer/%E4%BA%A4%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/physical_layer/%E4%BA%A4%E6%8D%A2/</guid>
      <description>交换方式#交换网络一般是这样的：
两个设备之间可能会有多个交换设备
1 电路交换#两结点之间进行通信需要先建立一条专用通道，在通信期间中间每个交换器的发送方向是固定的，也就是说这条路径是双方独占的
所以分三个阶段：建立连接 - 数据传输 - 释放连接
2 报文交换#基于“存储-转发”的思想
数据交换单位为报文，报文中包含了目标地址和源地址的信息，交换设备逐个寄出去，因此不存在独占
缺点在于：有时间延迟、交换设备存储空间
3 分组交换#基于报文交换，限制数据块大小上限，把大数据块分为小数据块，每一小块在加上一些必要控制信息，单位就是小数据块，叫分组Packet
对比：
3.1 数据报方式#简单来说就是发送到不同的交换设备上，最后到达顺序和发送顺序可能不一样，而且甚至有些包还送不到
3.2 虚电路方式#建立一条逻辑上相连的虚电路
先呼叫，找到目标，然后原路呼叫回去，便建立一条逻辑通路，这样其实就是固定了一条路，同时是非占用的
释放也是呼叫两次</description>
    </item>
    
    <item>
      <title>DNS</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/dns/</guid>
      <description>域名系统#Domain Name System, DNS 是一种命名系统，和IP地址对应
层次域名空间：域名的语法规则
域名服务器记域名的解析
域名命名规则#从左到右是顶级域名
顶级域名TLD主要有三类：
国家地区：.cn, .uk, .hk 等等 通用顶级域名：.com 公司，.org 非盈利组织，.gov政府 等等 基础结构域名：只有一个arpa，用于反向域名解析，不知道具体是啥 每个域由不同组织管理
域名服务器#服务器进行域名解析，一个服务器的管辖范围称之为区
这个在《网络是怎样连接的》深有体会
根域名服务器知道所有顶级域名服务器IP地址，本地域名服务器无法解析就会首先区根域名服务器上找，但它其实只是中介，并不负责解析
本机向本地域名服务器要
权限域名服务器：主机都在这里登记
域名解析过程#本机构造一个DNS请求报文发给本地域名服务器
主机以递归方式向本地服务器查询
本地服务器以迭代方式向根服务器查询（给出答案或者找答案的地方）
每个DNS服务器上有高速缓存，方便快速查找
额，本机到本地域名服务器这个递归了个寂寞</description>
    </item>
    
    <item>
      <title>IPv4</title>
      <link>https://zvictorliu.github.io/computer_networking/network_layer/ipv4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/network_layer/ipv4/</guid>
      <description>IPv4#IP协议定义IP分组和其数据格式
一个IP分组的格式为：首部+数据
首部中的重要字段：版本，长度，，，，
当IP数据报较长超过链路层的MTU时，将其分为多个小IP数据报，称为片，在目的地被重新组装（具体是通过标识号来确定属于同一个IP数据报下）
IP地址：每台主机或路由器都分配一个，32位
由网络号+主机号
有些特殊的IP地址
网络地址转换NAT#讲专用网络地址转换为共用地址，专用网只占一个全球IP地址
局域网LAN的私有IP地址，私有IP地址是可重用的
NAT路由器的地址是global的，不同端口映射到局域网内不同私有IP地址
所以在互联网上的人是不知道局域网的构成的，保存在NAT路由器上面
子网#三级IP地址结构：网络号:子网号:主机号
子网掩码</description>
    </item>
    
    <item>
      <title>TCP协议</title>
      <link>https://zvictorliu.github.io/computer_networking/transportation_layer/tcp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/transportation_layer/tcp/</guid>
      <description>TCP协议#报文格式#各个字段的含义：
序号
TCP传输的每个字节都按顺序编号，序号字段存入本报文段数据的第一个自己序号 确认号
数据偏移（首部长度）
保留
紧急位URG
确认位ACK
推送位PSH
复位位RST
同步位SYN
终止位FIN
窗口
紧急指针
选项
填充
连接管理#建立#三个要求：
每一方都要知道对方的存在 双方需要协商某些参数 对运输实体资源分配 每条连接以两端的套接字确定，需要三次握手：
客户机向服务器发送请求报文段
这个报文段比较特殊，发出去后进入 SYN-SENT状态 服务器收到，同意，发回确认
进入SYN-RCVD状态 客户机收到后，再向服务器发出确认
进入ESTABLISHED状态 释放#四次握手
可靠传输#首部的确认号是期望对方收到的下一个报文段的序号，检查这个
累积确认方式，并不是按顺序的
超时和冗余ACK时会进行重传
收到比期望的序号大的，发送一个冗余ACK指明，当发送方收到3个冗余ACK后就会重传 流量控制#基于滑动窗口
拥塞控制#</description>
    </item>
    
    <item>
      <title>组帧</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E7%BB%84%E5%B8%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E7%BB%84%E5%B8%A7/</guid>
      <description>组帧#帧的意义在于，如果出错不必完全重新传
组帧就是帧的封装，对上层传下来的信息进行封装
信息以帧为最小单位，是比特流中的一段，所以有首部和尾部
有四种组装方式
1 字符计数法#2 字符填充法#3 零比特填充#4 违规编码#</description>
    </item>
    
    <item>
      <title>差错控制</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6/</guid>
      <description>差错控制#只针对比特差错：0和1弄反
有检查差错的编码和纠正差错的编码
检错#纠错#</description>
    </item>
    
    <item>
      <title>文件传输协议</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/ftp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/ftp/</guid>
      <description>文件传输协议#客户向服务器建立两个并行的TCP连接：
控制连接：21号端口 数据连接：20号端口 服务器持续监听21号端口，等等客户连接，会话期间一直打开
服务器上主进程负责接收请求，子进程负责处理单个请求
控制进程接到请求后创建数据传送进程和数据连接
两种数据传输模式：
主动模式：PORT 客户端和服务器连接后，客户端自己开发一个端口，将端口号和PORT命令发送给服务器，服务器于是将20号端口和这个端口建立数据连接 被动模式：PASV 服务器收到PASV命令后，随机开放一个端口并告知客户端，客户端与之建立数据连接 FTP修改服务器上文件：
先读回来，修改后再传上去 网络文件系统：
能够远程操控，只复制一个小片段回来修改然后安装上去 </description>
    </item>
    
    <item>
      <title>电子邮件</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</guid>
      <description>电子邮件#异步通信方式算是一种思维革新吧
把东西放到信箱里，不需要同时在场
邮件系统结构#用户代理UA：用户和电子邮件系统的接口，一般就是电子邮件客户端
邮件服务器：它们之间发送和接收邮件
协议：用户代理和邮件服务器之间的协议
邮件格式和MIME#邮件的格式是 首部+主体
首部包括：
From: 源（UA帮填） To: 目标 Subject: 可选，用户填写主题 多用途网际邮件扩充MIME: 在SMTP基础上定义非ASCII码的编码规则，所以不只发英文文本还可以发附件
STMP和POP3#STMP#连接建立：发送服务器扫描缓冲区，发现有邮件就去和接收服务器建立连接，并发送HELO命令测试
邮件传送：
先MAIL FROM: &amp;lt;xxx&amp;gt;命令，看是否有OK返回，检查是否准备好接收 发送 RCPT TO: &amp;lt;xxx&amp;gt;命令，看是否有OK返回，检查地址是否正确 发送DATA命令，理论返回354 start mail input; end with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt; CR（Carriage Return）表示回车，CR（Carriage Return）表示回车，但这个跟操作系统有关，Windows下一行是CR+LF，而Linux只有LF，所以我们git有时候会有这个东西的替换 然后发送具体内容，回复OK 发出QUIT，回复xxx POP3和IMAP#下载并保留，下载并删除
IMAP则功能更多
基于万维网的，用户和服务器之间用HTTP</description>
    </item>
    
    <item>
      <title>WWW万维网</title>
      <link>https://zvictorliu.github.io/computer_networking/application_layer/%E4%B8%87%E7%BB%B4%E7%BD%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/application_layer/%E4%B8%87%E7%BB%B4%E7%BD%91/</guid>
      <description>万维网#一切事物使用统一资源定位符URL标识，通过超文本传输协议HTTP传送，而超文本标记语言HTML对文档结构的标记，使得能够在本地显示
浏览器，就是万维网在主机上的客户程序，而存万维网文档的主机成为万维网服务器
HTTP#浏览器向万维网服务器请求万维网文档以及传送给浏览器的协议
这点就是《网络是怎样连接的》讲的内容
HTTP是无连接的，不需要先建立连接
HTTP是无状态的，并不记忆客户是否访问过，但如果想记忆需要用到Cookie，服务器给用户分配一个识别码，以后用户访问的报文是带着识别码的，从而在服务器的数据库找到活动记录</description>
    </item>
    
  </channel>
</rss>
